{% macro time(time, format) -%}
<time datetime="{{ time.format(constant('DateTime::ISO8601')) }}">{{ time | localizeddate('short', 'short') }}</time>
{%- endmacro %}

{% macro date(time, format) -%}
<time datetime="{{ time.format(constant('DateTime::ISO8601')) }}">{{ time | localizeddate('short', 'none') }}</time>
{%- endmacro %}

{% macro collection_prototype(widget) %}
    {% if widget.get('prototype') %}
        {% set form = widget.get('prototype') %}
        {% set name = widget.get('prototype').get('name') %}
    {% else %}
        {% set form = widget %}
        {% set name = widget.get('full_name') %}
    {% endif %}
    <div data-content="{{ name }}">
        <div class="row-oro oro-multiselect-holder">
            {{ form_errors(form) }}
            {% for child in form %}
                {{ form_errors(child) }}
                {{ form_widget(child) }}
            {% endfor %}
            {{ form_rest(form) }}
            <button class="removeRow btn btn-action btn-link" type="button" data-related="{{ name }}">×</button>
        </div>
    </div>
{% endmacro %}

{#
    Render flexible attribute row
    Parameters:
        value - flexible attribute
#}
{% macro flexibleAttributeRow(value) %}
    {{ _self.attibuteRow(value.attribute.label, value.__toString|default('N/A')) }}
{% endmacro %}

{#
    Render attribute row
    Parameters:
        title - attribute title
        value - attribute value
        additionalData - array with additional data
#}
{% macro attibuteRow(title, value, additionalData) %}
        {% macro attribute_data(value, additionalData) %}
            <div class="clearfix-oro">
                {% if value.value is not defined  %}
                    <p class="control-label">{{ value }}</p>
                {% else %}
                    <p class="control-label">{{ value.value }} <strong>{{ value.hint|trans }}</strong></p>
                {% endif %}
            </div>
            {% if additionalData|length %}
                {% for data in additionalData.data %}
                    <div class="clearfix-oro">
                        <p class="control-label">{{ attribute(data, additionalData.field) }}</p>
                    </div>
                {% endfor %}
            {% endif %}
        {% endmacro %}
        {{ _self.renderAttribute(title, _self.attribute_data(value, additionalData)) }}
{% endmacro %}

{#
    Render attribute row with custom data block
    Parameters:
        title - row title
        data - row data
#}
{% macro renderAttribute(title, data) %}
    <div class="control-group">
        <label class="control-label">{{ title|trans }}</label>
        <div class="controls">
            {{ data|raw }}
        </div>
    </div>
{% endmacro %}

{#
    Create the button
    Parameters - array:
        [
            'path' - button url
            'aClass' - additional button class
            'dataMessage' - message before delete record
            'title' - button title
            'iClass' - css class for 'i' tag (icon)
            'label' - button label
        ]
#}
{% macro button(parameters) %}
    <div class="pull-left btn-group icons-holder">
        <a href="{{ parameters.path }}"
           class="btn back icons-holder-text {{ parameters.aClass is defined? parameters.aClass : '' }}"
           title="{{ parameters.title|trans }}">
            {% if parameters.iClass is defined %}
                <i class="{{ parameters.iClass }} hide-text" >{{ parameters.label|trans }}</i>
            {% endif %}
            {{ parameters.label|trans }}
        </a>
    </div>
{% endmacro %}

{#
    Add button
    Parameters - array:
        [
            'path' - button url
            'aClass' - additional button class
            'dataMessage' - message before delete record
            'title' - button title
            'label' - button label
        ]
#}
{% macro addButton(parameters) %}
    <a href="{{ parameters.path }}"
       class="btn btn-primary pull-right {{ parameters.aClass is defined? parameters.aClass : '' }}"
       {% if parameters.title is defined %}
            title="{{ parameters.title|trans }}">
       {% endif %}
       {{ parameters.label|trans }}
    </a>
{% endmacro %}

{#
    Delete button with javascript handler
    Parameters - array:
        [
            'aCss' - additional css class for 'a' tag
            'dataId' - data-id parameter
            'dataMessage' - message before delete record
            'dataUrl' - data-url parameter
            'title' - button title
            'label' - button label
        ]
#}
{% macro deleteButton(parameters) %}
    <div class="pull-left btn-group icons-holder">
        <a href="javascript: void(0);" class="btn icons-holder-text {{ parameters.aCss is defined? parameters.aCss : '' }}"
           {% if (parameters.id is defined) %}
                id="{{ parameters.id }}"
           {% endif %}
           data-id="{{ parameters.dataId }}"
           data-message="{{ parameters.dataMessage|trans }}"
           data-url="{{ parameters.dataUrl  }}"
           data-redirect="{{ parameters.dataRedirect  }}"
           {% if (parameters.title is defined) %}
                title="{{ parameters.title|trans }}"
           {% endif %}
           >
           <i class="icon-trash hide-text">{{ parameters.label|trans }}</i>{{ parameters.label|trans }}
        </a>
    </div>
{% endmacro %}

{#
    Button macros with custom button type
    Parameters - array:
        [
            'type' - button type
            'class' - additional button css classes
            'label' - label of button
        ]
#}
{% macro buttonType(parameters) %}
    <div class="btn-group">
        <button type="{{ parameters.type }}" class="btn {% if (parameters.class is defined) %}{{ parameters.class }}{% endif %}">
            {{ parameters.label|trans }}
        </button>
    </div>
{% endmacro %}

{#
    Separator between buttons
#}
{% macro buttonSeparator() %}
    <div class="pull-left">
        <div class="separator-btn"></div>
    </div>
{% endmacro %}

{#
    Create scroll sub block for scroll block
    Parameters:
        title - title of sub block
        data - array with data fields (i.e. form_row() or attibuteRow() data)
        cols - number of columns
        isForm - flag what scroll block mut contain the form
        useSpan - flag to indicate is subblock must have span6 css class or not
#}
{% macro scrollSubblock(title, data, cols, isForm, useSpan) %}
    {% if useSpan is not defined or useSpan == true %}
        {% set span = 'span6' %}
    {% else %}
        {% set span = '' %}
    {% endif %}
    {% if isForm is defined and isForm == true %}
        <fieldset class="form-horizontal {{ span }}">
    {% else %}
        <div class="form-horizontal {% if cols > 1 %}{{ span }}{% endif %}">
    {% endif %}
    {% if title|length %}<h5 class="usser-fiedset"><span>{{ title|trans }}</span></h5>{% endif %}
    {% for dataBlock in data %}
        {{ dataBlock|raw }}
    {% endfor %}
    {% if isForm is defined and isForm == true %}
        </fieldset>
    {% else %}
        </div>
    {% endif %}
{% endmacro %}

{#
    Create scroll block for scroll data area
    Parameters:
        blockId - id of block
        title - block title
        'subblocks' - array with scroll sub blocks:
            [
                'title' - title of sub block
                'data' - array with data fields (i.e. form_row() or attibuteRow() data)
            ]
        isForm - flag what scroll block mut contain the form
#}
{% macro scrollBlock(blockId, title, subblocks, isForm) %}
    {% set cols = subblocks|length %}
    <div class="usser-row">
        <h4 id="{{ blockId }}" class="scrollspy-title">{{ title|trans }}</h4>
        <div class="row-fluid {% if cols > 1 %}row-fluid-divider{% endif %}">
            {% for subblock in subblocks %}
                {{ _self.scrollSubblock(subblock.title|length ? subblock.title : null, subblock.data, cols, isForm, subblock.useSpan is defined ? subblock.useSpan : true) }}
            {% endfor %}
        </div>
    </div>
{% endmacro %}

{#
    Create scroll blocks (like in view or update pages)
    Parameters:
        dataTarget - id of scroll block
        data - array with scroll data blocks
        isForm - flag what scroll block mut contain the form
    data parameter structure:
        [
            'scrollBlocks' - array of blocks. each block consist of:
                [
                    'title' - title of scroll block
                    'class' - additional css class for scroll block menu item
                    'subblocks' - array with scroll sub blocks:
                        [
                            'title' - title of sub block
                            'data' - array with data fields (i.e. form_row() or attibuteRow() data)
                        ]
                ]
            'formErrors' - errors from the form
            'hiddenData' - additional data (hidden fields from the form)
        ]
#}
{% macro scrollData(dataTarget, data, isForm) %}
    <div id="{{ dataTarget }}" class="navbar navbar-static scrollspy-nav">
        <div class="navbar-inner">
            <div class="container-fluid" style="width: auto;">
                <ul class="nav">
                    {% for navElement in data.scrollBlocks %}
                        <li {% if navElement.class is defined %}class="{{ navElement.class }}"{% endif %}><a href="#scroll-{{ loop.index }}">{{ navElement.title|trans }}</a></li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
    <div class="clearfix">
        {% if data.formErrors is defined and data.formErrors | length%}
            <div class="customer-info-actions container-fluid well-small">
                <div class="pull-left alert alert-error">
                    <button class="close" type="button" data-dismiss="alert">×</button>
                    {{ data.formErrors|raw }}
                </div>
            </div>
        {% endif %}
        <div data-spy="scroll" data-target="#{{ dataTarget }}" data-offset="50" class="scrollspy container-fluid scrollable-container">
            {% for scrollBlock in data.scrollBlocks %}
                {{ _self.scrollBlock("scroll-" ~ loop.index, scrollBlock.title, scrollBlock.subblocks, isForm) }}
            {% endfor %}
            {% if data.hiddenData is defined %}
                <div class="hide">
                    {{ data.hiddenData|raw }}
                </div>
            {% endif %}
        </div>
    </div>
{% endmacro %}

{#
    Create collection field block
    Parameters:
        field - form collection field
        label - label of block
        buttonCaption - Caption of add entity button
#}
{% macro collectionField(field, label, buttonCaption) %}
    <div class="control-group">
        <label for="selectAccountName" class="control-label">{{ label|trans }}:</label>
        <div class="controls">
            <div class="row-oro">
                <div class="collection-fields-list" data-prototype="{{ _self.collection_prototype(field)|escape }}">
                    {% for emailField in field.children %}
                        {{ _self.collection_prototype(emailField) }}
                    {% endfor %}
                </div>
                <a class="btn add-list-item" href="javascript: void(0);">{{ buttonCaption|trans }}</a>
            </div>
        </div>
    </div>
{% endmacro %}

{#
    Render data grid div
    Parameters:
        gridId - datagrid div id
#}
{% macro gridBlock(gridId) %}
    <div id="{{ gridId }}"></div>
{% endmacro %}